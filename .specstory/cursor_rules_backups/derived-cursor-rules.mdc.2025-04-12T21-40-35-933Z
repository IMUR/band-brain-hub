
## PROJECT OVERVIEW
Band Brain Hub is a single-page, mobile-critical web application designed for band members to collaboratively manage events, tasks, notes, finances, and setlists. The application prioritizes rapid deployment, excellent UX/UI, and seamless real-time synchronization. Offline support is crucial. The application is implemented as a single-file application using Svelte 5, TypeScript, and Tailwind CSS, leveraging IndexedDB for persistence and local JSON-like data structures. Authentication is already implemented. The application uses an internal JSON-based data layer for persistence. Data persistence is managed via local JSON-like structures within TypeScript and IndexedDB.  The application should maintain a conversational tone in interactions with users.

## CODE STYLE
Consistent with standard Svelte/TypeScript best practices. Emphasis on readability and maintainability. Avoid JSX-style comments in Svelte components. Use standard Svelte comment syntax.

## FOLDER ORGANIZATION
The project uses a minimized folder structure. Core application logic resides in `src/App.svelte`. Additional files include `package.json`, `vite.config.ts`, `tailwind.config.js`, `postcss.config.js`, `tsconfig.json`, `index.html`, `src/app.css`, `src/main.ts`, and a `src/components` folder (currently empty). A `src/data` folder may be added for storing JSON data. A `.gitignore` file should be created to manage ignored files and folders (see WORKFLOW & RELEASE RULES for details). A `test` directory will be added to house automated testing scripts. A `test-tools` directory has been added to contain automated testing and debugging tools. A `chrome-extension` directory will contain the unpacked browser extension for MCP tools. A `svelte.config.js` file has been added for configuring Svelte compiler options.

## TECH STACK
Svelte 5, TypeScript, Tailwind CSS, Font Awesome, uuid, IndexedDB, Vite (build tool), idb, tslib, @tsconfig/svelte, @sveltejs/vite-plugin-svelte, autoprefixer, postcss, Bun (package manager and Javascript runtime), Node.js (optional), @tailwindcss/postcss, puppeteer, @modelcontextprotocol/sdk

## PROJECT-SPECIFIC STANDARDS
- All data is persisted locally using IndexedDB and managed via local JSON-like structures within TypeScript.
- The application is designed as a single-file application for ease of deployment and maintenance (using Vite for development).
- UI should be intuitive for users with varying levels of technical expertise. 
- Reactive, real-time updates are implemented using Svelte 5 runes.
- Offline support is provided through IndexedDB integration.
- Bun is the preferred package manager and Javascript runtime. Node.js is optional. Use `bun run dev` for development and `bun run build` for production builds. If Bun is slow, try clearing the cache with `bun pm cache rm`.
- The application uses an internal JSON-based data layer for persistence.
- `tsconfig.json` and `tsconfig.node.json` must be configured correctly to avoid TypeScript errors. The `"strict"` and `"forceConsistentCasingInFileNames"` compiler options should be enabled. `tsconfig.node.json` is required for Vite even when using Bun.
- The `compatibility.componentApi` compiler option must be set to `4` in `svelte.config.js` to address Svelte 5 component instantiation issues.  This setting should be handled through `svelte.config.js` instead of `tsconfig.json`.
- Use `bun run dev` for development and `bun run build` for production builds. Use `bun run preview` for previewing production builds.
- `tailwind.config.js` must include `"./src/**/*.{js,ts,jsx,tsx,svelte}"` in the `content` array.


## WORKFLOW & RELEASE RULES
Rapid iterative development and deployment cycles. Prioritize features based on user needs and feedback. Use `bun run dev` for development and `bun run build` for production builds. Use `bun run preview` for previewing production builds. A comprehensive `.gitignore` file must be used to manage ignored files and folders. The `.gitignore` file should include entries for dependencies, build artifacts, environment variables, debug logs, IDE files, OS files, and common build artifacts and caches (see REFERENCE EXAMPLES for a sample `.gitignore` file). Hot-swapping (hot module replacement) is available only during development (`bun run dev`) and not during preview (`bun run preview`) or production builds. Use `bun run dev`, `bun run build`, and `bun run preview` for development, build, and preview commands respectively. Use `bun run build --watch` to rebuild automatically when changes are detected.  The automated testing process loop described in FINAL DOs AND DON'Ts should be integrated into the release workflow.  The automated testing process loop should be run using `bun run process-loop`. Use `bun` as the runtime for all commands.  Use `bun run build-and-refresh` to trigger a build and a browser refresh after each build. This command should be integrated into the automated testing loop.


## REFERENCE EXAMPLES
- **.gitignore:**

```
# Dependencies
node_modules/
/.pnp
.pnp.js
yarn.lock
package-lock.json

# Testing
/coverage
.nyc_output

# Production/Build
/build
/dist
/.next/
/out/
.nuxt
.output

# Environment Variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env*.local

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# IDEs and Editors
/.idea
.project
.classpath
.settings/
*.sublime-workspace
*.sublime-project
.vscode/*
!.vscode/extensions.json
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json

# OS Files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Misc
*.log
*.csv
*.dat
*.out
*.pid
*.seed
*.pid.lock
.lock-wscript
.node_repl_history
.npm
.eslintcache
.stylelintcache
.cache
.parcel-cache
.serverless/
.fusebox/
.dynamodb/
.tern-port
.webpack/
.svelte-kit
.vercel
.turbo

# TypeScript
*.tsbuildinfo
next-env.d.ts

# Chrome Extension
chrome-extension/
```

## PROJECT DOCUMENTATION & CONTEXT SYSTEM
All documentation is embedded within the `app.svelte` file (post-build) through comments and type definitions. Version update 2025-04-12: Added debugging and logging statements to improve monitoring and troubleshooting. Version update 2025-04-12: Added a `svelte.config.js` file for configuring Svelte compiler options, specifically `compatibility.componentApi: 4`. Version update 2025-04-12: Added detailed steps for automated process loop using Puppeteer and MCP tools. Added additional browser-tools MCP functions (getConsoleErrors, getNetworkLogs, getNetworkErrors, runPerformanceAudit, runAccessibilityAudit). Version update 2025-04-12: Added preload for Font Awesome CSS to improve performance. Version update 2025-04-12: Added password field to login form.  Version update 2025-04-12: Improved styling of login form. Version update 2025-04-12: Added placeholders for quick add buttons and improved the overall UI design. Version update 2025-04-12: Added placeholders for interactive elements (checkboxes, etc.). Version update 2025-04-12: Added `test-tools` directory and `process-loop.js` for automated testing and debugging. Version update 2025-04-12: Added `cli.js` for command line interface for automated testing.  Version update 2025-04-12: Added improved styling and functionality to various components. Version update 2025-04-12: Improved error handling and added more robust logging and debugging statements. Version update 2025-04-12: Added a `config.js` file for configuring the automated testing loop. Version update 2025-04-12: Added a `README.md` file to the `test-tools` directory documenting the automated testing loop. Version update 2025-04-12: Added a note explaining the use of the automated testing loop in an AI agent context. Version update 2025-04-12: Added a note to the `README.md` file in the root directory documenting the automated testing loop.


## DEBUGGING
Standard browser developer tools. If Bun is slow, try clearing the cache with `bun pm cache rm`. Use `bun run dev` for development. Use browser developer tools. Address "effect_orphan" errors by ensuring `$effect` runes are used correctly within component lifecycles, avoiding async operations directly within them. Ensure proper error handling within `$effect` blocks. Address "component_api_invalid_new" errors by setting the `compatibility.componentApi` compiler option to `4` in `svelte.config.js`. Avoid using `new` keyword to instantiate Svelte components in Svelte 5. Use the functional approach instead. Address "effect_orphan" errors by ensuring asynchronous operations within `$effect` blocks are handled correctly. Consider using a script to automate the process loop involving Puppeteer, browser tools, and rebuilds. A script to automate testing and build processes using Puppeteer is recommended (see FINAL DOs AND DON'Ts). Use puppeteer_navigate, puppeteer_screenshot, puppeteer_click, puppeteer_fill, puppeteer_select, puppeteer_hover, puppeteer_evaluate as needed for testing and debugging. To run puppeteer alongside the preview server, run `bun run preview` and `bun run preview-puppeteer` simultaneously. Browser tools MCP may require a browser extension; consider including the unpacked extension (`@chrome-extension`) in your project. The `test` directory will contain scripts for automated testing using Puppeteer and MCP tools. A `test-tools` directory contains the automated process loop scripts. The `test-tools` directory includes `process-loop.js`, `config.js`, and `cli.js`.  To launch Puppeteer with a Chrome extension, use the following command (replace with your actual paths): `bun puppeteer-with-extension.js --extension-path="E:\\Band_Page\\chrome-extension"`.  The correct path format is crucial for extension loading.


## FINAL DOs AND DON'Ts
- **DO** prioritize simplicity and ease of use.
- **DO** ensure the application is mobile-friendly and responsive.
- **DO** maintain a consistent and visually appealing design.
- **DO** use clear and concise language in all interactions.
- **DO** use Bun as the package manager and Javascript runtime. Node.js is optional.
- **DO** use an internal JSON-based data layer for persistence.
- **DO** configure `tsconfig.json` and `tsconfig.node.json` correctly, enabling `"strict"` and `"forceConsistentCasingInFileNames"` compiler options. The `compatibility.componentApi` compiler option must be set to `4` in `svelte.config.js`.
- **DO** create and maintain a comprehensive `.gitignore` file.
- **DON'T** use external backend services (e.g., Supabase).
- **DON'T** over-engineer solutions; strive for simplicity.
- **DO** use `bun run dev` for development and `bun run build` for production builds. Use `bun run preview` for previewing production builds.
- **DO** use standard Svelte comment syntax, avoid JSX-style comments.
- **DO** ensure that asynchronous operations within `$effect` blocks are handled correctly to avoid "effect_orphan" errors.
- **DO** use the functional approach (not `new`) to instantiate Svelte components in Svelte 5.
- **DO** configure `tailwind.config.js` to include `"./src/**/*.{js,ts,jsx,tsx,svelte}"` in the `content` array.
- **DO** preload Font Awesome CSS to improve performance.  Use `<link rel="preload" href="..." as="style" onload="this.onload=null;this.rel='stylesheet'"><noscript><link rel="stylesheet" href="..."></noscript>`
- **DO** Follow this automated process loop:
1. Set up Puppeteer with Chrome extension; 
2. Check browser-tools MCP (excluding wipelogs); 
3. Attempt fix; 
4. Update memory MCP; 
5. Run `bun run build`; 
6. Use puppeteer MCP; 
7. Check browser-tools MCP (excluding wipelogs); 
8. Undo ineffective changes; 
9. Use browser-tools MCP (only wipelogs); 
10. Run `bun run build`; Repeat.
- **DO** Use `bun` as the runtime for all commands (`bun run dev`, `bun run build`, `bun run preview`).
- **DO** Use `bun run build-and-refresh` to trigger a build and a browser refresh after each build. This command should be integrated into the automated testing loop.
- **DO** Use `bun test-tools/cli.js run-loop` to run the automated testing loop.

## WORKFLOW & RELEASE RULES
Rapid iterative development and deployment cycles. Prioritize features based on user needs and feedback. Use `bun run dev` for development and `bun run build` for production builds. Use `bun run preview` for previewing production builds. A comprehensive `.gitignore` file must be used to manage ignored files and folders. The `.gitignore` file should include entries for dependencies, build artifacts, environment variables, debug logs, IDE files, OS files, and common build artifacts and caches (see REFERENCE EXAMPLES for a sample `.gitignore` file). Hot-swapping (hot module replacement) is available only during development (`bun run dev`) and not during preview (`bun run preview`) or production builds. Use `bun run dev`, `bun run build`, and `bun run preview` for development, build, and preview commands respectively. Use `bun run build --watch` to rebuild automatically when changes are detected.  The automated testing process loop described in FINAL DOs AND DON'Ts should be integrated into the release workflow.  The automated testing process loop should be run using `bun run process-loop`. Use `bun` as the runtime for all commands.